<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2011  JTalks.org Team
    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.
    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.
    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

-->
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
  <class name="org.jtalks.common.model.entity.Group" table="GROUPS" abstract="true">
    <cache usage="nonstrict-read-write" region="org.jtalks.EHCOMMON"/>

    <id column="GROUP_ID" name="id" unsaved-value="0">
      <generator class="native"/>
    </id>

    <property column="UUID" name="uuid" not-null="true" unique="true"/>
    <property column="NAME" name="name" not-null="true"/>
    <property column="DESCRIPTION" name="description"/>

    <!-- "Extra-lazy" is used due to probable large amount of users in a group -->
    <!-- The relationship is saved by user side (inverse=true). Why particularly user side stores this info? Let's
      imagine that group saves the connection, this would mean that a) Hibernate removes all the records from
      GROUP_USER_REF that relate to this group and then re-inserts them back (that's how Bag works in MTM relationship),
      this is not cool because popular groups like Registered Users contain thousands of users which would make this
      operation slow. That was causing a bug http://jira.jtalks.org/browse/JC-1521. In the meanwhile a User is usually a
      member of pretty limited amount of groups which won't cause performance degradation if we remove all its groups
      and re-insert them back.
    -->
    <bag name="users" table="GROUP_USER_REF" lazy="extra" fetch="select" inverse="true">
      <cache usage="nonstrict-read-write" region="org.jtalks.common.model.entity.Group.users"/>
      <key column="GROUP_ID" not-null="true"/>
      <many-to-many class="org.jtalks.jcommune.model.entity.JCUser">
        <column name="USER_ID" not-null="true"/>
      </many-to-many>
    </bag>
  </class>

  <query name="findGroupByName">
    <![CDATA[from Group g where g.name like concat ('%', :name, '%')]]>
  </query>

  <query name="findGroupExactlyByName">
    <![CDATA[from Group g where lower(g.name) = lower(:name)]]>
  </query>

  <query name="findAllGroups">
    <![CDATA[from Group order by name]]>
  </query>

  <query name="findGroupsOfUser">
    <![CDATA[from Group g where ? in g.users]]>
  </query>

  <query name="getGroupsByIds">
      <![CDATA[from Group where id in (:ids)]]>
  </query>

  <query name="selectGroupsWithUserCount">
      <![CDATA[select new org.jtalks.jcommune.model.dto.GroupAdministrationDto(g.id, g.name, g.description, g.users.size) from Group g order by g.name ASC]]>
  </query>

  <query name="getUserDTOListFromGroupById">
      <![CDATA[select new org.jtalks.jcommune.model.dto.UserDto(u.username, u.email, u.id) from Group g join g.users u where g.id = :id order by u.username ASC]]>
  </query>
</hibernate-mapping>
