<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2011  JTalks.org Team
    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.
    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.
    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

-->
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="org.jtalks.jcommune.model.entity">
    <class name="Topic" table="TOPIC">
        <cache usage="read-write"/>
        <id column="TOPIC_ID" name="id" unsaved-value="0">
            <generator class="native"/>
        </id>
        <property column="UUID" name="uuid" unique="true" not-null="true"/>
        <property column="TITLE" name="title" not-null="true"/>
        <property name="creationDate" type="org.joda.time.contrib.hibernate.PersistentDateTime"
                  column="CREATION_DATE" not-null="true"/>
        <property name="modificationDate" type="org.joda.time.contrib.hibernate.PersistentDateTime"
                  column="MODIFICATION_DATE" not-null="false"/>
        <property name="sticked" column="STICKED" not-null="true"/>
        <property name="views" column="VIEWS"/>
        <property name="announcement" column="ANNOUNCEMENT" not-null="true"/>
        <property name="closed" column="CLOSED" not-null="true"/>
        <property name="type" column="TYPE" not-null="true"/>

        <!--By experimenting figured out that 10 is the best batch size when it comes to opening the branch page
This might be tuned further in the future if the page size itself changes.-->
        <bag name="posts" cascade="all-delete-orphan" inverse="true" batch-size="10" order-by="creationDate">
            <cache usage="read-write"/>
            <key column="TOPIC_ID" foreign-key="FK_TOPIC"/>
            <one-to-many class="Post"/>
        </bag>

      <!-- Here inverse="true"  should increase performance of insertaion new draft by avoiding redundant update statement -->
        <bag name="drafts" cascade="all-delete-orphan" inverse="true">
          <cache usage="read-write"/>
          <key column="TOPIC_ID" foreign-key="FK_TOPIC_POST_DRAFT"/>
          <one-to-many class="PostDraft"/>
        </bag>

        <many-to-one name="topicStarter" column="TOPIC_STARTER" class="JCUser"
                     lazy="false"
                     not-null="true" foreign-key="FK_TOPIC_STARTER"/>
        <many-to-one name="branch" column="BRANCH_ID" class="Branch"
                     not-null="false"/>
        <!--This is an emulation of OTO association. It's actually OTO, but expressed via MTO because in OTO schema it's
        impossible to have additional column for POLL_ID in TOPIC, thus it's impossible to have lazy loading unless every
        TOPIC has POLL which is not our case.-->
        <many-to-one name="poll" class="Poll" column="POLL_ID"
                     foreign-key="TOPIC_POLL_FK" cascade="all"/>

        <set name="subscribers" table="TOPIC_SUBSCRIPTIONS">
            <key column="TOPIC_ID"/>
            <many-to-many column="USER_ID" class="JCUser"/>
        </set>
        <map name="attributes" table="TOPIC_ATTRIBUTE" cascade="all-delete-orphan">
          <cache usage="read-write"/>
          <key column="TOPIC_ID" foreign-key="FK_TOPIC_ATTRIBUTE"/>
          <map-key type="java.lang.String" column="NAME"/>
          <element type="text" column="VALUE" not-null="true"/>
        </map>

    </class>

    <query name="getAllowedSubscribersForTopic">
        <![CDATA[SELECT ts FROM Topic topic JOIN topic.subscribers ts JOIN ts.groups tsg WHERE topic = (:topic) AND topic.branch.id
            not in (select v.branchId from org.jtalks.jcommune.model.entity.ViewTopicsBranches v where v.granting=0 and v.sid in elements(tsg.id))
            AND topic.branch.id in (select v.branchId from org.jtalks.jcommune.model.entity.ViewTopicsBranches v where v.granting=1 and v.sid in elements(tsg.id))]]>
    </query>

    <query name="getCountTopicsInBranch">
        <![CDATA[SELECT COUNT(topic) FROM Topic topic WHERE topic.branch = :branch]]>
    </query>

    <query name="getTopicsInBranch">
        <![CDATA[SELECT topic FROM Topic topic WHERE topic.branch = :branch 
                 ORDER BY sticked DESC, modificationDate DESC]]>
    </query>

    <query name="getCountRecentTopicsByGroups">
        <![CDATA[SELECT COUNT(topic) FROM Topic topic WHERE modificationDate > :maxModDate AND topic.branch.id
            in (select distinct view.branchId from org.jtalks.jcommune.model.entity.ViewTopicsBranches view where view.sid in (:groupIds) and view.branchId not in (select v.branchId from org.jtalks.jcommune.model.entity.ViewTopicsBranches v where v.granting=0 and v.sid in (:groupIds)))]]>
    </query>

    <query name="getRecentTopicsByGroups">
        <![CDATA[FROM Topic topic WHERE modificationDate > :maxModDate AND topic.branch.id
            in (select distinct view.branchId from org.jtalks.jcommune.model.entity.ViewTopicsBranches view where view.sid in (:groupIds) and view.branchId not in (select v.branchId from org.jtalks.jcommune.model.entity.ViewTopicsBranches v where v.granting=0 and v.sid in (:groupIds))) ORDER BY modificationDate DESC]]>
    </query>

    <query name="getCountRecentTopicsForAnonymousUser">
        <![CDATA[SELECT COUNT(topic) FROM Topic topic WHERE modificationDate > :maxModDate AND topic.branch.id
            in (select distinct branch.id from org.jtalks.jcommune.model.entity.Branch branch, org.jtalks.jcommune.model.entity.ViewTopicsBranches view where branch.id=view.branchId and view.granting=1 and view.sid like 'anonymousUser' )]]>
    </query>

    <query name="getRecentTopicsForAnonymousUser">
        <![CDATA[FROM Topic topic WHERE modificationDate > :maxModDate AND topic.branch.id
            in (select distinct branch.id from org.jtalks.jcommune.model.entity.Branch branch, org.jtalks.jcommune.model.entity.ViewTopicsBranches view where branch.id=view.branchId and view.granting=1 and view.sid like 'anonymousUser' ) ORDER BY modificationDate DESC]]>
    </query>

    <query name="getCountUnansweredTopicsByGroups">
        <![CDATA[SELECT COUNT(t) FROM Topic t WHERE t.posts.size=1 AND t.branch.id in (select distinct view.branchId from org.jtalks.jcommune.model.entity.ViewTopicsBranches view where view.sid in (:groupIds) and view.branchId not in (select v.branchId from org.jtalks.jcommune.model.entity.ViewTopicsBranches v where v.granting=0 and v.sid in (:groupIds)))]]>
    </query>

    <query name="getUnansweredTopicsByGroups">
        <![CDATA[FROM Topic t WHERE t.posts.size=1 AND t.branch.id in (select distinct view.branchId from org.jtalks.jcommune.model.entity.ViewTopicsBranches view where view.sid in (:groupIds) and view.branchId not in (select v.branchId from org.jtalks.jcommune.model.entity.ViewTopicsBranches v where v.granting=0 and v.sid in (:groupIds))) ORDER BY modificationDate DESC]]>
    </query>

    <query name="getCountUnansweredTopicsForAnonymousUser">
        <![CDATA[SELECT COUNT(t) FROM Topic t WHERE t.posts.size=1 AND t.branch.id in (select distinct branch.id from org.jtalks.jcommune.model.entity.Branch branch, org.jtalks.jcommune.model.entity.ViewTopicsBranches view where branch.id=view.branchId and view.granting=1 and view.sid like 'anonymousUser' )]]>
    </query>

    <query name="getUnansweredTopicsForAnonymousUser">
        <![CDATA[FROM Topic t WHERE t.posts.size=1 AND t.branch.id in (select distinct branch.id from org.jtalks.jcommune.model.entity.Branch branch, org.jtalks.jcommune.model.entity.ViewTopicsBranches view where branch.id=view.branchId and view.granting=1 and view.sid like 'anonymousUser' ) ORDER BY modificationDate DESC]]>
    </query>

    <!--Get all the topics ID and the number of posts (to them) from the branch-->
    <sql-query name="getTopicAndLatestPostDateInBranch">
        <return-scalar column="topic" type="string"/>
        <return-scalar column="last_date" type="org.joda.time.contrib.hibernate.PersistentDateTime"/>
        SELECT tp.TOPIC_ID as topic, MAX(p.POST_DATE) as last_date FROM TOPIC tp left join POST p ON
        tp.TOPIC_ID=p.TOPIC_ID where BRANCH_ID=:branch group by tp.TOPIC_ID
    </sql-query>

    <!--Mark topic as read for user-->
    <sql-query name="markAllTopicsRead">
        INSERT INTO LAST_READ_POSTS(UUID,USER_ID,LAST_READ_POST_DATE,TOPIC_ID)
        VALUES(:uuid,:user,:lastPostDate,:topic)
    </sql-query>

    <!--Mark all topics unread for user-->
    <sql-query name="deleteAllMarksReadToUser">
        DELETE FROM LAST_READ_POSTS where TOPIC_ID IN (select TOPIC_ID from TOPIC where BRANCH_ID=:branch) and
        USER_ID=:user
    </sql-query>


</hibernate-mapping>
