<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2011  JTalks.org Team
    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.
    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.
    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">


  <bean id="exceptionTranslationInterceptor"
        class="org.springframework.dao.support.PersistenceExceptionTranslationInterceptor"/>

  <!--Declaration of AOP Config -->
  <aop:config>
    <aop:advisor advice-ref="exceptionTranslationInterceptor"
                 pointcut="execution(* org.jtalks.common.model.dao.Crud+.* (*))"/>
    <aop:advisor advice-ref="exceptionTranslationInterceptor"
                 pointcut="execution(* org.jtalks.jcommune.model.dao.ForumStatisticsDao.* (*))"/>
    <aop:advisor advice-ref="exceptionTranslationInterceptor"
                 pointcut="execution(* org.jtalks.jcommune.model.dao.ValidatorDao.* (*))"/>
  </aop:config>

  <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>

  <!--Declaration of DAO beans -->
  <bean id="userDao" parent="genericDao"
        class="org.jtalks.jcommune.model.dao.hibernate.UserHibernateDao"/>

  <bean id="groupDao" parent="genericDao"
        class="org.jtalks.jcommune.model.dao.hibernate.GroupHibernateDao"/>

  <bean id="topicDao" parent="genericDao"
        class="org.jtalks.jcommune.model.dao.hibernate.TopicHibernateDao"/>

  <bean id="postDao" parent="genericDao"
        class="org.jtalks.jcommune.model.dao.hibernate.PostHibernateDao"/>

  <bean id="topicBranchDao" parent="genericDao"
        class="org.jtalks.jcommune.model.dao.hibernate.BranchHibernateDao"/>

  <bean id="privateMessageDao" parent="genericDao"
        class="org.jtalks.jcommune.model.dao.hibernate.PrivateMessageHibernateDao"/>

  <bean id="branchSectionDao" parent="genericDao"
        class="org.jtalks.jcommune.model.dao.hibernate.SectionHibernateDao"/>

  <bean id="lastReadPostHibernateDao" parent="genericDao"
        class="org.jtalks.jcommune.model.dao.hibernate.LastReadPostHibernateDao"/>

  <bean id="forumStatisticsDAO"
        class="org.jtalks.jcommune.model.dao.hibernate.ForumStatisticsHibernateDao">
    <constructor-arg index="0" ref="sessionFactory"/>
  </bean>

  <bean id="validatorDao" class="org.jtalks.jcommune.model.dao.hibernate.ValidatorHibernateDao">
    <constructor-arg ref="sessionFactory"/>
  </bean>

  <bean id="userContactsDao" parent="genericDao"
        class="org.jtalks.jcommune.model.dao.hibernate.UserContactsHibernateDao"/>

  <bean id="simplePageDao" parent="genericDao"
        class="org.jtalks.jcommune.model.dao.hibernate.SimplePageHibernateDao"/>

  <bean id="pollDao" parent="genericDao"
        class="org.jtalks.common.model.dao.hibernate.GenericDao">
    <constructor-arg name="type" value="org.jtalks.jcommune.model.entity.Poll"/>
  </bean>

  <bean id="pollOptionDao" parent="genericDao"
        class="org.jtalks.common.model.dao.hibernate.GenericDao">
    <constructor-arg name="type"
                     value="org.jtalks.jcommune.model.entity.PollItem"/>
  </bean>

  <bean id="propertyDao" parent="genericDao"
        class="org.jtalks.jcommune.model.dao.hibernate.PropertyHibernateDao"/>

  <bean id="componentDao" parent="genericDao"
        class="org.jtalks.jcommune.model.dao.hibernate.ComponentHibernateDao"/>

  <bean id="lastReadPostDao" parent="genericDao"
        class="org.jtalks.jcommune.model.dao.hibernate.LastReadPostHibernateDao"/>

  <bean id="postCommentDao" parent="genericDao"
        class="org.jtalks.common.model.dao.hibernate.GenericDao">
    <constructor-arg name="type"
                     value="org.jtalks.jcommune.model.entity.PostComment"/>
  </bean>

  <bean id="postDraftDao" parent="genericDao"
        class="org.jtalks.common.model.dao.hibernate.GenericDao">
    <constructor-arg name="type" value="org.jtalks.jcommune.model.entity.PostDraft"/>
  </bean>

  <bean id="bannerDao" parent="genericDao"
        class="org.jtalks.jcommune.model.dao.hibernate.BannerHibernateDao"/>

  <bean id="externalLinkDao" parent="genericDao"
        class="org.jtalks.jcommune.model.dao.hibernate.ExternalLinkHibernateDao"/>

  <bean id="genericDao" abstract="true" class="org.jtalks.common.model.dao.hibernate.GenericDao">
    <constructor-arg name="sessionFactory" ref="sessionFactory"/>
  </bean>

  <bean id="pluginConfigurationDao" class="org.jtalks.jcommune.model.dao.hibernate.PluginConfigurationHibernateDao">
    <constructor-arg name="sessionFactory" ref="sessionFactory"/>
  </bean>

  <bean id="markBranchAsReadDao" parent="genericDao"
        class="org.jtalks.jcommune.model.dao.hibernate.BranchReadedMarkerHibernateDao"/>

  <!-- Declaration of Hibernate Search DAO beans -->
  <bean id="topicSearchDao"
        class="org.jtalks.jcommune.model.dao.search.hibernate.TopicHibernateSearchDao">
    <constructor-arg name="sessionFactory" ref="sessionFactory"/>
    <constructor-arg name="filters">
      <list>
        <ref bean="invalidCharactersFilter"/>
        <ref bean="stopWordsFilter"/>
      </list>
    </constructor-arg>
  </bean>
  <bean id="invalidCharactersFilter"
        class="org.jtalks.jcommune.model.search.InvalidCharactersFilter"/>
  <bean id="stopWordsFilter"
        class="org.jtalks.jcommune.model.search.StopWordsFilter">
    <constructor-arg>
      <list>
        <value>org/jtalks/jcommune/lucene/english_stop.txt</value>
        <value>org/jtalks/jcommune/lucene/russian_stop.txt</value>
      </list>
    </constructor-arg>
    <constructor-arg value="true"/>
  </bean>
  <!--Declaration and setting up datasource, sessionFactory and transactionalManager
 beans -->

  <!--We're wrapping our underlying data source with lazy one so that connection is not retrieved from the pool unless-->
  <!--it's really necessary. E.g. if Hibernate hits only cache, there is no need to fetch connection, but without lazy-->
  <!--data source, it will be actually fetched if service methods are marked with @Transactional-->
  <bean id="dataSource"
        class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
    <property name="targetDataSource">
      <bean class="com.mchange.v2.c3p0.ComboPooledDataSource"
            destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <!--the properties are set by JndiAwarePropertyPlaceholderConfigurer, see it for details-->
        <property name="jdbcUrl" value="${JCOMMUNE_DB_URL}"/>
        <property name="user" value="${JCOMMUNE_DB_USER:root}"/>
        <property name="password" value="${JCOMMUNE_DB_PASSWORD:root}"/>
        <property name="maxStatements" value="1500"/>
        <property name="maxStatementsPerConnection" value="50"/>
        <!--Should be close to the size of the web server thread pool in order not to let threads wait for connections-->
        <property name="maxPoolSize" value="50"/>
        <!--Every hour we'll be hitting DB to make sure MySQL doesn't kill the connection. By default if connection
 is idle for 8 hrs, MySQL kills it-->
        <property name="idleConnectionTestPeriod" value="3600"/>
        <!--This is required because if all the connections are taken and threads are waiting, they might be blocked
        forever. But if we specify this timeout, an exception will be raised in case of threads being blocked for too long.-->
        <property name="checkoutTimeout" value="10000"/>
      </bean>
    </property>
  </bean>

  <bean id="sessionFactory"
        class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"
        depends-on="flyway_jcommune">
    <property name="dataSource" ref="dataSource"/>
    <property name="mappingResources">
      <list>
        <value>/org/jtalks/jcommune/model/entity/JCUser.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/Group.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/Post.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/Topic.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/Branch.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/PrivateMessage.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/Section.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/UserContact.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/UserContactType.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/LastReadPost.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/Poll.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/PollOption.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/Property.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/SimplePage.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/Component.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/ViewTopicsBranches.hbm.xml
        </value>
        <value>/org/jtalks/jcommune/model/entity/PostComment.hbm.xml
        </value>
        <value>/org/jtalks/jcommune/model/entity/Banner.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/ExternalLink.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/PluginConfiguration.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/PluginProperty.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/BranchReadedMarker.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/PostVote.hbm.xml</value>
        <value>/org/jtalks/jcommune/model/entity/PostDraft.hbm.xml</value>
      </list>
    </property>
    <property name="hibernateProperties">
      <props>
        <prop key="hibernate.query.factory_class">
          org.hibernate.hql.ast.ASTQueryTranslatorFactory
        </prop>
        <prop key="hibernate.dialect">${hibernate.dialect}</prop>
        <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
        <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
        <prop key="hibernate.connection.charset">${encoding}</prop>
        <prop key="hibernate.connection.release_mode">auto</prop>
        <prop key="hibernate.cache.region.factory_class">
          ${HIBERNATE_CACHE_FACTORY:net.sf.ehcache.hibernate.SingletonEhCacheRegionFactory}
        </prop>
        <prop key="hibernate.cache.use_second_level_cache">
          ${hibernate.use_second_level_cache}
        </prop>
        <prop key="hibernate.cache.use_query_cache">
          ${hibernate.use_query_cache}
        </prop>
        <prop key="net.sf.ehcache.configurationResourceName">
          ${EH_CACHE_CONFIG:/org/jtalks/jcommune/model/entity/ehcache.xml}
        </prop>
        <prop key="hibernate.search.default.directory_provider">
          ${hibernate.search.default.directory_provider}
        </prop>
        <prop key="hibernate.search.default.indexBase">
          ${hibernate.search.default.indexBase}
        </prop>
      </props>
    </property>
  </bean>
  <bean id="transactionManager"
        class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory" ref="sessionFactory"/>
  </bean>
  <bean class="org.jtalks.jcommune.model.utils.JndiAwarePropertyPlaceholderConfigurer">
    <property name="location"
              value="classpath:/org/jtalks/jcommune/model/datasource.properties"/>
  </bean>

  <bean id="hibernateStatisticsMBean"
        class="org.hibernate.jmx.StatisticsService">
    <property name="statisticsEnabled" value="true"/>
    <property name="sessionFactory" ref="sessionFactory"/>
  </bean>
  <bean class="org.jtalks.jcommune.model.utils.ConfigurationLogger">
    <property name="ehCacheConfigLocation" value="${EH_CACHE_CONFIG:/org/jtalks/jcommune/model/entity/ehcache.xml}"/>
  </bean>

  <bean class="org.jtalks.jcommune.model.utils.PersistenceCleanupContextShutdownHook" destroy-method="dispose"/>

  <!-- Migrations, todo: 4 beans - that's weird, Ticket has been left for common to move init to one method -->

  <bean id="flyway_common_init" class="org.jtalks.common.util.FlywayWrapper"
        init-method="smartInit">
    <property name="dataSource" ref="dataSource"/>
    <property name="table" value="common_schema_version"/>
    <property name="enabled" value="${migrations_enabled}"/>
  </bean>
  <bean id="flyway_common" class="org.jtalks.common.util.FlywayWrapper"
        init-method="migrate"
        depends-on="flyway_common_init">
    <property name="dataSource" ref="dataSource"/>
    <property name="basePackage" value="org.jtalks.common.migrations"/>
    <property name="baseDir" value="/org/jtalks/common/migrations"/>
    <property name="table" value="common_schema_version"/>
    <property name="enabled" value="${migrations_enabled}"/>
  </bean>
  <bean id="flyway_jcommune_init" class="org.jtalks.common.util.FlywayWrapper"
        init-method="smartInit"
        depends-on="flyway_common">
    <property name="dataSource" ref="dataSource"/>
    <property name="table" value="jcommune_schema_version"/>
    <property name="enabled" value="${migrations_enabled}"/>
  </bean>
  <bean id="flyway_jcommune" class="org.jtalks.common.util.FlywayWrapper"
        init-method="migrate"
        depends-on="flyway_jcommune_init">
    <property name="dataSource" ref="dataSource"/>
    <property name="basePackage" value="org.jtalks.jcommune.migrations"/>
    <property name="baseDir" value="/org/jtalks/jcommune/migrations"/>
    <property name="table" value="jcommune_schema_version"/>
    <property name="enabled" value="${migrations_enabled}"/>
  </bean>

</beans>
